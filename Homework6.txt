Symbols: โ โข โฆ ฮ ฮป โค ๐น โฆ โง

1. Proof Trees

1. 2 * (3 + 4)
                 -------Ty-Int   -------Ty-Int
                  {}โข 3:โค       {}โข 4:โค
-------Ty-Int    --------------Ty-Add
{}โข 2:โค           {}โข (3 + 4):โค
-------------------------------Ty-Mul
{}โข 2 * (3 + 4) :โค


2. if (0 > 1) 2 3

------Ty-Int  ------Ty-Int
{}โข0:โค       {}โข1:โค
--------Ty-GT   -----Ty-Int  ----Ty-Int
{}โข(0>1):๐น     {}โข2:โค       {}โข3:โค
--------------------Ty-If
{}โขif (0 > 1) 2 3 :โค

3. (((ฮปx:โค.ฮปy:โค.x + y) 8) 9)

-------------------Ty-Var  -------------------Ty-Var  
{(x,โค),(y,โค)}โขx:โค          {(x,โค),(y,โค)}โขy:โค
---------------------------------------------Ty-Add
{(x,โค),(y,โค)}โข(x+y):โค
---------------------------Ty-ฮป
{(x,โค)}โข(ฮปy:โค.x+y):โคโโค
---------------------Ty-ฮป   -------Ty-Int
{}โข(ฮปx:โค. ฮปy:โค.x+y):โคโโคโโค   {}โข8:โค
--------------------------------Ty-App  -------Ty-Int
{}โข((ฮปx:โค. ฮปy:โค.x+y) 5):โคโโค             {}โข9:โค
-----------------------------------------------Ty-App
{}โข(((ฮปx:โค. ฮปy:โค.x+y) 8) 9) : โค


4. ((ฮปx:โค.x+1) 5)

-------------Ty-Var  -------------Ty-Int
{(x,โค)}โขx:โค          {(x,โค)}โข1:โค
------------------Ty-Add
{(x,โค)}โข(x+1): โค
-------------------Ty-ฮป   -----------Ty-Int
{}โข(ฮปx:โค.x+1): โคโโค       {}โข5:โค
----------------------Ty-App
{}โข((ฮปx:โค.x+1) 5) :โค

5. (head ( nil โฆ๐นโง )) 

---------------Ty-Nil
{}โข( nil โฆ๐นโง ):โฆ๐นโง
----------------------Ty-Head
{}โข(head ( nil โฆ๐นโง )):๐น

-----------------------------------------------------------------------------

2. Type Errors

1. cons true (nil โฆโคโง)

----------Ty-True  -----------Ty-Nil
{}โขtrue:๐น        (nil โฆโคโง):โฆโคโง
-------------------------Ty-Cons
{}โขcons true (nil โฆโคโง):<Failure>  This use of Ty-Cons expects a โค in its left subterm, but we got a ๐น.

2. ((ฮปx:โค.x>2) true)

-----------------Ty-ฮป  ----------Ty-true
{}โข(ฮปx:โค.x>2):โคโ๐น        {}โขtrue:๐น
-----------------------Ty-App
{}โข((ฮปx:โค.x>2) true):<Failure> This use of Ty-App expects โค as its input, but we got a ๐น

-----------------------------------------------------------------------------

3. Language Extensions

3.1 Maybe: t ::= โฆ | just t | nothing T | isjust t | unjust t

   ฮ โขt : T
-----------------
ฮ โข just t : just t

------------------------
ฮ โข nothing T : T

 ฮ โขt : Maybe T
-----------------
ฮ โข isjust t : ๐น

 ฮ โขt : Maybe T
-----------------
ฮ โข unjust t : T


3.2 Either: t ::= โฆ | left t T | right T t | isleft t | isright t | getleft t | getright t

   ฮ โขt : Tb
------------------
ฮ โข left t Td: Tb

   ฮ โขt : Tb
------------------
ฮ โข right Td t: Tb

 ฮ โขt : Either T T
--------------------
 ฮ โข isleft t : ๐น

  ฮ โขt : Either T T
--------------------
 ฮ โข isright t : ๐น

 ฮ โขt : Either T T
--------------------
 ฮ โข getleft t : T

 ฮ โขt : Either T T
--------------------
 ฮ โข getright t : T

 ---------------------------------------------------------------------------------------

4. Encodings

1. nand = ฮปa:๐น. ฮปb:๐น. (a (not b)) not a

2. thrice = (ฮปf:โคโโค. ฮปx:โค.f (f (f x)))

3. cubed = ฮปx:โค. x * x * x

4. modify = ฮปx:Either โค ๐น. if (isleft x) (left (x+1) ๐น) (right โค (not x))

5. safeAdd = ฮปx:Maybe โค. ฮปy:Maybe โค. safeAddHelper x + safeAddHelper y

   safeAddHelper = ฮปx:Maybe โค. if (isjust x) x 0

6. all = fix ( ฮปself:โฆ๐นโงโ๐น.
                   ฮปxs:โฆ๐นโง.
                       if (isnil xs) true ((head xs) and (self (tail xs)))
             )

7. sumlist = fix ( ฮปself:โฆโคโงโโค.
                        ฮปxs:โฆโคโง.
                            if (isnil xs) 0 ((head xs) + (self (tail xs)))

8. takeN = fix ( ฮปself:โฆโคโงโโคโโฆโคโงโโค.
                    ฮปxs:โฆโคโง.
                        ฮปn:โค.
                            ฮปys:โฆโคโง.
                                if (n=0) ys (self (tail xs) (n-1) (cons ys (head xs)))
          )

9. filter = fix ( ฮปself:(โคโ๐น)โโฆโคโงโโฆโคโง.
                    (
                        ฮปf:โคโโค.
                            ฮปxs:โฆโคโง.
                                if (isnil xs) (nil โฆโคโง) 
                                    if (f (head xs)) (cons (head xs) (self f (tail xs))) (self f (tail xs))
                    )
                 ) 

10. zipwith = fix ( ฮปself:(โคโโคโโค)โโฆโคโงโโฆโคโงโโฆโคโง.
                    (
                        ฮปf:โคโโคโโค.
                            ฮปxs:โฆโคโง.
                            	ฮปys:โฆโคโง.
                                	if (isnil xs) 
                                	    (ys) 
                                	    (cons (f (head xs) (head ys)) (self f (tail xs) (tail ys)))
                    )
                 ) 